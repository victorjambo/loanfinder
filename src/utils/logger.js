import Analytics from 'appcenter-analytics';
import {logEvent} from './analytics';

export const INFO = {
  ACTION: {
    FIREBASE_LOGIN: 'INFO_ACTION_FIREBASE_LOGIN',
    FIREBASE_REGISTER: 'INFO_ACTION_FIREBASE_REGISTER',
    FIREBASE_LOGOUT: 'INFO_ACTION_FIREBASE_LOGOUT',
    FIREBASE_GOOGLE_AUTH: 'INFO_ACTION_FIREBASE_GOOGLE_AUTH',
    FIREBASE_FETCH_API: {
      loanfinder: 'INFO_ACTION_FIREBASE_FETCH_API_ENDPOINT_LOANFINDER',
      appstate: 'INFO_ACTION_FIREBASE_FETCH_API_ENDPOINT_APPSTATE',
    },
    SAVE_APP: 'INFO_ACTION_SAVE_APP',
    FS: 'INFO_ACTION_UPDATE_FS',
    REHYDRATE: {
      COUNTRIES: 'INFO_ACTION_FIREBASE_FETCH_API_REHYDRATE_COUNTRIES',
      ADS: 'INFO_ACTION_FIREBASE_FETCH_API_REHYDRATE_ADS',
      TERMS: 'INFO_ACTION_FIREBASE_FETCH_API_REHYDRATE_TERMS',
      LOCATION: 'INFO_ACTION_FIREBASE_FETCH_API_REHYDRATE_LOCATION',
    },
  },
  AD: {
    REQUEST_AND_SHOW_REWARDED: 'INFO_ADMOB_REQUEST_AND_SHOW_REWARDED',
    LOADED: {
      INTERSTITIAL: 'ADMOB_LOADED_INTERSTITIAL',
      REWARDED: 'ADMOB_LOADED_REWARDED',
      BANNER: 'ADMOB_LOADED_BANNER',
    },
    REQUEST: {
      INTERSTITIAL: 'ADMOB_REQUESTED_INTERSTITIAL',
      REWARDED: 'ADMOB_REQUESTED_REWARDED',
    },
    OPENED: {
      INTERSTITIAL: 'ADMOB_OPENED_INTERSTITIAL',
      REWARDED: 'ADMOB_OPENED_REWARDED',
      BANNER: 'ADMOB_OPENED_BANNER',
    },
    CLOSED: {
      INTERSTITIAL: 'ADMOB_CLOSED_INTERSTITIAL',
      REWARDED: 'ADMOB_CLOSED_REWARDED',
      BANNER: 'ADMOB_CLOSED_BANNER',
    },
    SHOW: {
      INTERSTITIAL: 'ADMOB_SHOWING_INTERSTITIAL',
      REWARDED: 'ADMOB_SHOWING_REWARDED',
    },
    REWARDED: {
      SUCCESS: 'ADMOB_REWARDED_SUCCESS', // the user watched the entire video
      CHURN: 'ADMOB_REWARDED_CHURN_CLOSED', // the user closed the ad before reward ends
    },
  },
  LOCALSTORAGE: {
    GET_ITEM: {
      SAVE_APP: 'INFO_LOCALSTORAGE_GET_ITEM_SAVE_APP',
      AUTH: 'INFO_LOCALSTORAGE_GET_ITEM_AUTH',
    },
  },
  SKIP_AUTH: 'INFO_SKIP_AUTH',
};
export const ERROR = {
  ACTION: {
    FIREBASE_LOGIN: 'ERROR_ACTION_FIREBASE_LOGIN',
    FIREBASE_REGISTER: 'ERROR_ACTION_FIREBASE_REGISTER',
    FIREBASE_LOGOUT: 'ERROR_ACTION_FIREBASE_LOGOUT',
    FIREBASE_LOGOUT_CATCH: 'ERROR_ACTION_FIREBASE_LOGOUT_CATCH',
    FIREBASE_GOOGLE_AUTH: 'ERROR_ACTION_FIREBASE_GOOGLE_AUTH',
    FIREBASE_FETCH_API_CATCH: {
      loanfinder: 'ERROR_ACTION_FIREBASE_FETCH_API_ENDPOINT_LOANFINDER_CATCH',
      appstate: 'ERROR_ACTION_FIREBASE_FETCH_API_ENDPOINT_APPSTATE_CATCH',
    },
    FIREBASE_FETCH_API: {
      loanfinder: 'ERROR_ACTION_FIREBASE_FETCH_API_ENDPOINT_LOANFINDER',
      appstate: 'ERROR_ACTION_FIREBASE_FETCH_API_ENDPOINT_APPSTATE',
    },
  },
  AD: {
    REQUEST_REWARDED: 'INFO_ADMOB_REQUEST_AND_SHOW_REWARDED',
    REQUEST_AND_SHOW_REWARDED: 'ERROR_ADMOB_REQUEST_AND_SHOW_REWARDED_SHOW',
    FAILED_TO_LOAD: {
      INTERSTITIAL: 'ERROR_ADMOB_FAILED_TO_LOAD_INTERSTITIAL',
      REWARDED: 'ERROR_ADMOB_FAILED_TO_LOAD_REWARDED',
      BANNER: 'ERROR_ADMOB_FAILED_TO_LOAD_BANNER',
    },
    REQUEST: {
      INTERSTITIAL: 'ERROR_ADMOB_FAILED_TO_REQUEST_INTERSTITIAL',
      REWARDED: 'ERROR_ADMOB_FAILED_TO_REQUEST_REWARDED',
    },
    SHOW: {
      INTERSTITIAL: 'ERROR_ADMOB_FAILED_TO_SHOW_INTERSTITIAL',
      REWARDED: 'ERROR_ADMOB_FAILED_TO_SHOW_REWARDED',
    },
    NOT_READY: 'ERROR_ADMOB_AD_IS_NOT_READY',
    ALREADY_LOADED: 'ERROR_ADMOB_AD_IS_ALREADY_LOADED',
    NETWORK: 'ERROR_ADMOB_REQUEST_UNSUCCESSFUL_NETWORK_CONNECTIVITY',
    INTERNAL: 'ERROR_ADMOB_INTERNAL_INVALID_RESPONSE_FROM_AD_SERVER',
    NO_FILL: 'ERROR_ADMOB_REQUEST_SUCCESSFUL_BUT_NO_AD_RETURNED',
  },
  LOCALSTORAGE: {
    GET_ITEM: {
      SAVE_APP: 'ERROR_LOCALSTORAGE_GET_ITEM_SAVE_APP',
      AUTH: 'ERROR_LOCALSTORAGE_GET_ITEM_AUTH',
    },
  },
};
export const WARN = {
  LOCALSTORAGE: {
    GET_ITEM: {
      SAVE_APP: 'WARN_LOCALSTORAGE_GET_ITEM_SAVE_APP_NO_DATA',
      AUTH: 'WARN_LOCALSTORAGE_GET_ITEM_AUTH_NO_DATA',
    },
  },
  NODATA: {
    HOME: 'WARN_HOME_NO_APPS_IN_CURRENT_LOCATION',
  },
};

export const logInfo = event => {
  if (__DEV__) {
    console.log(event);
  } else {
    appcenterAnalytics(event);
    logEvent(event, {
      info: event,
    });
  }
};

export const logError = (event, error) => {
  if (__DEV__) {
    console.info(event, error);
  } else {
    appcenterAnalytics(event, error);
    logEvent(event, {
      error: error.toString(),
      errorObj: JSON.stringify(error),
    });
  }
};

const appcenterAnalytics = async (event, props = {}) => {
  return await Analytics.trackEvent(event, props);
};
